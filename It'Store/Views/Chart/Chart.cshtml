@model ItStore.Models.DataFolder.ChartViewModel
<div class="intro">
    <script src="~/js/chart.min.js"></script>

    <div class="row container">
        <div class="col">
            <h3>Дешевая группа</h3>
            <table>
                <tr>
                    <th>Наименование</th>
                    <th>Группа</th>
                </tr>
                @foreach (var q in Model.Products.Where(q => (Model.FirstPoint - q.Price) / (Model.MostBigPrice - Model.SmallPriceFlag) + 1 > 0.75))
                {
                    <tr>
                        <td>
                            @q.Name
                        </td>
                        <td>
                            @q.Price
                        </td>
                    </tr>
                }
            </table>
        </div>
        <div class="col">
            <h3>Приемлимая группа</h3>
            <table>
                <tr>
                    <th>Наименование</th>
                    <th>Группа</th>
                </tr>
                @foreach (var q in Model.Products.Where(q => (q.Price - Model.SmallPriceFlag) / (Model.SecondPoint - Model.SmallPriceFlag) > 0.75
                && (Model.ThirdPoint - q.Price) / (Model.MostBigPrice - Model.ThirdPoint) + 1 > 0.75))
                {
                    <tr>
                        <td>
                            @q.Name
                        </td>
                        <td>
                            @q.Price
                        </td>
                    </tr>
                }
            </table>
        </div>
        <div class="col">
            <h3>Дорогая группа</h3>
            <table>
                <tr>
                    <th>Наименование </th>
                    <th> Цена</th>
                </tr>
                @foreach (var q in Model.Products.Where(q => (q.Price - Model.SmallPriceFlag) / (Model.FourthPoint - Model.SmallPriceFlag) > 0.75))
                {
                    <tr>
                        <td>
                            @q.Name
                        </td>
                        <td>
                            @q.Price
                        </td>
                    </tr>
                }
            </table>

        </div>
    </div>
    <canvas id="myChart" class="container" width="200" height="100"></canvas>
    <script>
    const ctx = document.getElementById('myChart').getContext('2d');
    const myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [@foreach (var q in Model.QuantityPoint){@q}],
                datasets:[{
                    label: 'Максимальное значение',
                    data: [@foreach (var q in Model.TopPrice){@q}],
                    backgroundColor: ['rgba(204, 255, 255, 0.5)'],
                    borderColor: ['rgba(204, 255, 255, 0.5)'],
                    borderWidth: 1
                },{
                    label: 'Среднее значение',
                    data: [@foreach (var q in Model.MidlePrice){@q}],
                    backgroundColor: ['rgba(153, 204, 155, 0.5)'],
                    borderColor: ['rgba(153, 204, 155, 0.5)'],
                    borderWidth: 2
                },{
                    label: 'Буржуйство',
                    data: [@foreach (var q in Model.First){@q}],
                    backgroundColor:['rgba(102, 178, 155, 0.5)'],
                    borderColor: ['rgba(102, 178, 155, 0.5)'],
                    borderWidth: 3
                },{
                    label: 'Бедность',
                    data: [@foreach (var q in Model.Second){@q}],
                    backgroundColor:['rgba(0, 76, 153, 0.5)'],
                    borderColor: ['rgba(0, 76, 153, 0.5)'],
                    borderWidth: 4
                },{
                    label: 'Четкость',
                    data: [@foreach (var q in Model.Third){@q}],
                    backgroundColor:['rgba(255, 76, 153, 0.5)'],
                    borderColor: ['rgba(255, 76, 153, 0.5)'],
                    borderWidth: 5
                }]
            },
            options: {
            scales: {
                y: {
                    beginAtZero: true
                    }
                }
            }
        });
    </script>
</div>

